import torch
import torch.nn as nn

class ResidualBlock(nn.Module):
    def __init__(self, channels):
        super().__init__()
        self.conv1 = nn.Conv2d(channels, channels, kernel_size=3, padding=1)
        self.relu = nn.ReLU()
        self.conv2 = nn.Conv2d(channels, channels, kernel_size=3, padding=1)

    def forward(self, x):
        residual = x                      
        out = self.conv1(x)
        out = self.relu(out)
        out = self.conv2(out)
        out = out + residual              
        out = self.relu(out)
        return out

x = torch.randn(1, 64, 32, 32)
block = ResidualBlock(64)
y = block(x)

print(x.shape)
print(y.shape)
