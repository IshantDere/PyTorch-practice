import torch
from torch import nn
from torch import optim
import torchvision
from torchvision import datasets
from torchvision import transforms
from torch.utils.data import DataLoader
from torch.utils.tensorboard import SummaryWriter

class conv(nn.Module):
    def __init__(self, in_channels,
                 out_channels,
                 kernel_size,
                 stride,
                 padding):
        super().__init__()

        self.conv = nn.Sequential(
            nn.Conv2d(in_channels,
                      out_channels,
                      kernel_size,
                      stride,
                      padding),
        
            nn.BatchNorm2d(out_channels),
            nn.LeakyReLU(0.2),            
        )
    def forward(self, x):
        return self.conv(x)

class conv_generator(nn.Module):
    def __init__(self, 
                 in_channels,
                 out_channels,
                 kernel_size,
                 stride,
                 padding):
        super().__init__()

        self.conv_gen = nn.Sequential(
            nn.ConvTranspose2d(in_channels, out_channels,
                               kernel_size, 
                               stride,
                               padding),
            nn.BatchNorm2d(out_channels),
            nn.ReLU()
        )

    def forward(self, x):
        return self.conv_gen(x)

class Generator(nn.Module):
    def __init__(self, z_dim, img_channels, out_features):
        super().__init__()

        self.gen = nn.Sequential(
            nn.ConvTranspose2d(
                z_dim, 
                out_features*16,
                4,2,1
            ),
            conv_generator(out_features*16, out_features*8, 4,2,1),
            conv_generator(out_features*8, out_features*4, 4,2,1),
            conv_generator(out_features*4, out_features*2, 4,2,1),
            conv_generator(out_features*2, out_features, 4, 2, 1),
            nn.ConvTranspose2d(out_features, 
                               img_channels, 
                               4,2,1),

            nn.Tanh()
        )

    def forward(self, x):
        return self.gen(x)

def weight_init(model):
    for m in model.modules():
        if isinstance(m, (nn.Conv2d, nn.ConvTranspose2d, nn.BatchNorm2d)):
            nn.init.normal_(m.weight.data, 0.0, 0.2)

class Discriminator(nn.Module):
    def __init__(self, channels_img, dim_img):
        super().__init__()

        self.disc = nn.Sequential(
            nn.Conv2d(
                channels_img, 
                dim_img,
                4, 2, 1
            ),
            nn.LeakyReLU(0.2),
            conv(dim_img, dim_img*2, 4, 2, 1),
            conv(dim_img*2, dim_img*4, 4, 2, 1),
            conv(dim_img*4, dim_img*8, 4, 2, 1),
            
            nn.Conv2d(dim_img*8, 1, 4, 1, 0),
            nn.Sigmoid()
        )

    def forward(self, x):
        return self.disc(x)

def test():
    N, in_channels, H, W = 8, 3, 64, 64
    z_dim = 100
    x = torch.randn((N, in_channels, H, W))
    disc = Discriminator(in_channels, 8)
    weight_init(disc)
    assert disc(x).shape == (N, 1,1,1)
    gen = Generator(z_dim, in_channels, 8)
    z = torch.randn((N, z_dim, 1, 1))
    assert gen(z).shape == (N, in_channels, H, W)

test()
print("success")

#########  SETUP TRAINING ##########

# hyperparameters 

device = "cuda" if torch.cuda.is_available() else "cpu"
learning_rate = 0.0002
batch_size = 128
image_size = 64
channels_img = 1
z_dim = 100
num_epochs = 5
features_disc = 64
features_gen = 64

transform = transforms.Compose([
    transforms.Resize(image_size),
    transforms.ToTensor(),
    transforms.Normalize(
        [0.5 for _ in range(channels_img)], 
        [0.5 for _ in range(channels_img)]
    ),
])

dataset = datasets.MNIST(root = "dataset/", train = True,
                         transform = transform,
                         download = True)
loader = DataLoader(dataset, batch_size = batch_size, shuffle = True)
gen = Generator(z_dim, channels_img, features_gen).to(device)
disc = Discriminator(channels_img, features_disc).to(device)
weight_init(gen)
weight_init(disc)

optim_gen = optim.Adam(gen.parameters(), lr = learning_rate, betas = 
 (0.5, 0.999))
optim_disc = optim.Adam(disc.parameters(), lr = learning_rate, betas = (0.5, 0.999)) 
criterion = nn.BCELoss()
fixed_noise = torch.randn(32, z_dim, 1, 1).to(device)

writer_real = SummaryWriter(f"logs/real")
writer_fake = SummaryWriter(f"logs/fake")
step = 0

gen.train()
disc.train()

## training discriminator ##

for epoch in range(num_epochs):
    for batch_idx, (real, _) in enumerate(loader):
        real = real.to(device)
        noise = torch.randn((batch_size, z_dim, 1, 1)).to(device)
        fake = gen(noise)

disc_real = disc(real).reshape(-1)
loss_disc_real = criterion(disc_real, torch.ones_like(disc_real))
fake = gen(noise)
disc_fake = disc(fake).reshape(-1)
loss_disc_fake = criterion(disc_fake, torch.zeros_like(disc_fake))
loss_disc = (loss_disc_real + loss_disc_fake) / 2
disc.zero_grad()
loss_disc.backward()
optim_disc.step()

### training generator ###

fake = gen(noise) 

output = disc(fake).reshape(-1) 
loss_gen = criterion(output, torch.ones_like(output)) 

optim_gen.zero_grad()
loss_gen.backward()
optim_gen.step()

if batch_idx % 100 == 0:
    print(f"Epoch [{epoch}/{num_epochs}] Batch [{batch_idx}/{len(loader)}] "
          f"Loss D: {loss_disc.item():.4f}, Loss G: {loss_gen.item():.4f}")


    writer_real.add_scalar("Discriminator Loss", loss_disc.item(), step)
    writer_fake.add_scalar("Generator Loss", loss_gen.item(), step)

    step += 1  

